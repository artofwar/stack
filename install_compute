#!/bin/bash
if [[ $UID -ne 0 ]]; then
        echo "only root can execute this script"
        exit 1
fi

if [ $# -ne 4 ];then
	echo "Usage:"
        echo "      `basename $0` -p password -a controller_address"
	exit 0
fi
while getopts 'p:a:' OPT; do
case $OPT in
        p)
            PASSWORD="$OPTARG";;
	a)
	    CTRL_ADDRESS="$OPTARG";;
        ?)
            echo "Usage:"
            echo "      `basename $0` -p password"
	    exit 0
esac
done

TOP_DIR=$(cd $(dirname "$0") && pwd)
rm -f $TOP_DIR/devstack/stack-screenrc

#add 163 repository
cat << EOF  > /etc/apt/sources.list
deb http://mirrors.163.com/ubuntu/ precise main universe restricted multiverse
deb-src http://mirrors.163.com/ubuntu/ precise main universe restricted multiverse
deb http://mirrors.163.com/ubuntu/ precise-security universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-security universe main multiverse restricted
deb http://mirrors.163.com/ubuntu/ precise-proposed universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-proposed universe main multiverse restricted
deb http://mirrors.163.com/ubuntu/ precise-backports universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-backports universe main multiverse restricted

EOF


#create stack user
source $TOP_DIR/devstack/functions
is_package_installed sudo || install_package sudo
if ! getent group stack >/dev/null; then
    echo "Creating a group called stack"
    groupadd stack
fi
if ! getent passwd stack >/dev/null; then
    echo "Creating a user called stack"
    useradd -g stack -s /bin/bash -d $DEST -m stack
fi
echo "Giving stack user passwordless sudo privileges"
# UEC images ``/etc/sudoers`` does not have a ``#includedir``, add one
grep -q "^#includedir.*/etc/sudoers.d" /etc/sudoers ||
    echo "#includedir /etc/sudoers.d" >> /etc/sudoers
( umask 226 && echo "stack ALL=(ALL) NOPASSWD:ALL" \
    > /etc/sudoers.d/50_stack_sh )
chown -R stack:stack $TOP_DIR

#get available space
cd $TOP_DIR
size=$(sudo df -m|grep '/$'|awk '{print $4}')
ava_size=$[size/1024]
if [ $ava_size -gt 300 ];then
        back_file_size=$[ava_size-300]
else
        back_file_size=5
fi


#install openstack
FIXED_RANGE=10.0.0.0/20
FLOATING_RANGE=192.168.136.192/26
cd $TOP_DIR
cd devstack
sudo killall screen 1>/dev/null 2>&1

# Exit on any errors so that errors don't compound
trap failed ERR
failed() {
    local r=$?
    kill >/dev/null 2>&1 $(jobs -p)
    set +o xtrace
    exit $r
}

cat <<EOF >localrc
FLAT_INTERFACE=eth0
FIXED_RANGE=$FIXED_RANGE
FIXED_NETWORK_SIZE=4096
FLOATING_RANGE=$FLOATING_RANGE
MULTI_HOST=1
MYSQL_PASSWORD=csdb123cnic
RABBIT_PASSWORD=$PASSWORD
SERVICE_PASSWORD=$PASSWORD
ADMIN_PASSWORD=$PASSWORD
SERVICE_TOKEN=$PASSWORD
SWIFT_HASH=$PASSWORD
VOLUME_BACKING_FILE_SIZE=${back_file_size}G
MULTI_HOST=1
MYSQL_HOST=$CTRL_ADDRESS
RABBIT_HOST=$CTRL_ADDRESS
GLANCE_HOSTPORT=${CTRL_ADDRESS}:9292
ENABLED_SERVICES=n-cpu,n-net,n-api,n-novnc,cinder,c-vol,swift
MY_ROLE=compute
SCREEN_LOGDIR=screen_log
EOF
./stack.sh compute $CTRL_ADDRESS

#install monitor related package and start services
cd $TOP_DIR
cd kanyun/
su -c "cat <<EOF >kanyun.conf
[worker]
id: worker_$(hostname)
worker_timeout: 60
dataserver_host: $CTRL_ADDRESS
dataserver_port: 5551
log: /tmp/kanyun-worker.log
EOF" stack
sudo ps ax|grep -v grep|grep kanyun-|awk '{print $1}'|xargs -L 1 kill -9 1>/dev/null 2>&1
sudo apt-get -y install libzmq-dev python-setuptools python-mysqldb redis-server python-redis python-zmq ganglia-monitor 1>/dev/null 2>&1
sudo service ganglia-monitor restart
su -c "nohup ./kanyun-worker >.kanyun-worker.nohup 2>/dev/null&" stack

